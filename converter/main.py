from PIL import Image, ImageSequence
import sys

#---------------------------------
# 使い方:  python gif2c.py input.gif > gif_animation.h
#---------------------------------
if len(sys.argv) < 2:
    print("Usage: python main.py input.gif")
    sys.exit(1)

input_gif = sys.argv[1]

# GIF読み込み
im = Image.open(input_gif)

# 全フレームを取得して 32x32 にリサイズして保持
frames = []
for frame in ImageSequence.Iterator(im):
    rgba = frame.convert("RGBA")
    rgba = rgba.resize((32, 32), Image.Resampling.LANCZOS)
    frames.append(rgba)

num_frames = len(frames)
if num_frames == 0:
    print("No frames found in GIF.")
    sys.exit(1)

#---------------------------------
# 全フレームを縦に連結した巨大画像を作る (一括で減色し、共通パレットを得るため)
#---------------------------------
w, h = 32, 32 * num_frames
big_image = Image.new("RGBA", (w, h))
for i, f in enumerate(frames):
    big_image.paste(f, (0, i * 32))

#---------------------------------
# RGBA -> RGB に変換 (透明度を無視or白で塗りつぶす などでもOK)
#---------------------------------
# 背景色が白の場合
rgb_big_image = Image.new("RGB", (w, h), (255, 255, 255))
rgb_big_image.paste(big_image.convert("RGB"), (0, 0))

#---------------------------------
# 一括で減色 (最大256色)
#---------------------------------
pal_image = rgb_big_image.convert("P", palette=Image.ADAPTIVE, colors=256)

# PIL内部パレットを取得 (最大256色分)
palette_data = pal_image.getpalette()  # [R0, G0, B0, R1, G1, B1, ...]
if palette_data is None:
    palette_data = [0]*768  # 念のためパレットが None の場合にはゼロ埋め

# 実際に得られた要素数 / 3 = パレット色数
len_pal = len(palette_data) // 3
used_palette = []
for i in range(len_pal):
    r = palette_data[3*i + 0]
    g = palette_data[3*i + 1]
    b = palette_data[3*i + 2]
    used_palette.append((r, g, b))

#---------------------------------
# フレームごとの 32x32インデックス配列を作成
#---------------------------------
pal_image_data = pal_image.load()  # big_imageと同サイズのパレット画像
indexed_frames = []

for f_idx in range(num_frames):
    frame_indices = []
    for y in range(32):
        row = []
        for x in range(32):
            # 縦方向に f_idx * 32 ピクセルだけ下がった位置
            index = pal_image_data[x, f_idx * 32 + y]
            row.append(index)
        frame_indices.append(row)
    indexed_frames.append(frame_indices)

#---------------------------------
# Cソース形式で出力
#---------------------------------
print("// Generated by gif2c.py")
print("#include <stdint.h>")
print("")
print("// フレーム数")
print(f"#define GIF_NUM_FRAMES {num_frames}")
print("// パレット数 (最大256)")
print(f"#define GIF_PALETTE_SIZE {len(used_palette)}")
print("")

print("/// RGB color representation")
print("typedef struct {")
print("    union { uint8_t r;   uint8_t red;   };")
print("    union { uint8_t g;   uint8_t green; };")
print("    union { uint8_t b;   uint8_t blue;  };")
print("} rgb_t;")
print("")

# パレット配列
print("static const rgb_t gif_palette[GIF_PALETTE_SIZE] = {")
for (r, g, b) in used_palette:
    print(f"    {{ .r = {r}, .g = {g}, .b = {b} }},")
print("};")
print("")

# フレーム配列 (インデックス配列)
print("static const uint8_t gif_frames[GIF_NUM_FRAMES][32][32] = {")
for f_idx in range(num_frames):
    print(f"    // Frame {f_idx}")
    print("    {")
    for y in range(32):
        row_data = ", ".join(str(x) for x in indexed_frames[f_idx][y])
        print(f"        {{{row_data}}},")
    print("    },")
print("};")

print("// End of generated file")